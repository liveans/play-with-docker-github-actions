name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-packages:
    name: Generate Linux Packages
    needs: []
    strategy:
      fail-fast: false
      matrix:
        vec: [
          { config: "Release", os: "ubuntu-20.04", arch: "arm", tls: "openssl" },
          { config: "Release", os: "ubuntu-20.04", arch: "arm64", tls: "openssl" },
          { config: "Release", os: "ubuntu-20.04", arch: "x64", tls: "openssl" },
          { config: "Release", os: "ubuntu-22.04", arch: "arm", tls: "openssl3" },
          { config: "Release", os: "ubuntu-22.04", arch: "arm64", tls: "openssl3" },
          { config: "Release", os: "ubuntu-22.04", arch: "x64", tls: "openssl3" },
          { config: "Release", os: "ubuntu-24.04", arch: "arm", tls: "openssl3" },
          { config: "Release", os: "ubuntu-24.04", arch: "arm64", tls: "openssl3" },
          { config: "Release", os: "ubuntu-24.04", arch: "x64", tls: "openssl3", xdp: "-UseXdp" },
        ]
    uses: ./.github/workflows/package-reuse-linux.yml
    with:
      config: ${{ matrix.vec.config }}
      os: ${{ matrix.vec.os }}
      arch: ${{ matrix.vec.arch }}
      tls: ${{ matrix.vec.tls }}
      xdp: ${{ matrix.vec.xdp }}
  
  test-packages:
    name: Test Linux Packages
    needs: [build-packages]
    strategy:
      fail-fast: false
      matrix:
        vec: [
          { config: "Release", os: "ubuntu-24.04", arch: "x64", tls: "openssl3", image: "mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-amd64", xdp: "-UseXdp" },
          { config: "Release", os: "ubuntu-24.04", arch: "arm", tls: "openssl3", image: "mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm32v7" },
          { config: "Release", os: "ubuntu-24.04", arch: "arm64", tls: "openssl3", image: "mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8" },
        ]
    runs-on: ${{ matrix.vec.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Download Package
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
      with:
        name: Package-${{ matrix.vec.config }}-linux-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}-UseSystemOpenSSLCrypto${{ matrix.vec.xdp }}
        path: artifacts
    - name: Download Build Artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
      with:
        name: ${{ matrix.vec.config }}-linux-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}-UseSystemOpenSSLCrypto${{ matrix.vec.xdp }}
        path: artifacts
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Checkout .NET QUIC Project
      uses: actions/checkout@v4
      with:
        repository: liveans/QuicSimpleTest
        ref: main
        path: QuicSimpleTest
    - name: Install .NET latest
      run: |
        wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
        chmod +x dotnet-install.sh
        ./dotnet-install.sh --channel 9.0
        export DOTNET_ROOT=~/.dotnet
        export PATH=$PATH:~/.dotnet
    - name: Build .NET QUIC Test Project
      run: |
        dotnet build -a ${{ matrix.vec.arch }} -c ${{ matrix.vec.config }}
    - name: Docker Run
      run: docker run -v $(pwd):/main ${{ matrix.vec.image }} /main/docker-script.sh ${{ matrix.vec.arch }} ${{ matrix.vec.config }} ${{ matrix.vec.tls }}
